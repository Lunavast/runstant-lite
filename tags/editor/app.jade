app
  header

  div.main
    editor.panel(width='60%', height='100%', float='right', onsave='{onsave}')
    preview.panel(width='40%', height='60%', float='left')
    console.panel(width='40%', height='40%', float='left', onpost='{onpost}')
  footer

  detailmodal

  style.
    body {
      background: hsl(0, 0%, 95%);
    }
    .main {
      position: absolute;
      width: 100%;
      height: calc(100% - 64px - 30px);
      overflow: hidden;
    }

    .panel {
      display: block;
      padding: 5px 5px;
      float: right;
      transition: 500ms;
    }

    .panel.fullscreen {
      width: 100% !important;
      height: 100% !important;
    }
    .panel.nofullscreen {
      width: 0% !important;
      height: 0% !important;
      opacity: 0.0;
      margin: 0px;
      padding: 0px;
    }
    .inner {
    /*
      border: 1px solid #ccc;
      */
      position: relative;
      width: 100%;
      height: 100%;
    }

  script.
    var self = this;

    runstant.detailModal = new runstant.Modal({
      query: '#detailmodal',
      ready: function() {
        self.tags.detailmodal.init();
      },
      complete: function() {
        self.tags.detailmodal.save();
        self.tags.editor.updateMode();
        self.loadScripts();
      },
    });

    this.on('mount', function() {
      window.onmessage = this.onmessage.bind(this);

      self.tags.preview.on('mount', function() {
        self.loadScripts();
      });
    });

    this.onsave = function() {
      self.tags.preview.refresh();
      self.save();
    };

    this.onpost = function(v) {
      self.tags.preview.post(v);
    };

    var cache = '';
    this.load = function() {
      var data = null;

      if (location.hash) {
        var hash = location.hash.substr(1);
        data = runstant.util.hash2json(hash);
      }
      else {
        data = JSON.parse( JSON.stringify(runstant.constant.TEMPLATE_DATA) );
      }

      // 後方互換
      if (data.setting.detail && !data.setting.description) {
        data.setting.description = data.setting.detail;
      }

      runstant.data = data;

      // キャッシュしておく
      cache = JSON.stringify(data);
      // タイトル更新
      document.title = data.setting.title + " | runstant";
    };
    this.load();

    this.save = function() {
      var data = runstant.data;
      var dataString = JSON.stringify(data);

      if (this.cache !== dataString) {
        this.cache = dataString;

        var hash = runstant.util.json2hash(data);
        history.pushState(null, 'runstant', '#' + hash);

        // タイトル更新
        document.title = data.setting.title + " | runstant";
      }
    };


    this.loadScripts = function() {
      var code = runstant.data.code;

      var pathes = (function() {
        var types = [
          code.html.type,
          code.style.type,
          code.script.type,
        ];

        var pathes = [];

        types.forEach(function(type) {
          var path = runstant.constant.LANG_SCRIPT_MAP[type];
          if (path) {
            pathes.push(path);
          }
        });

        return pathes;
      })();

      runstant.util.loadScripts(pathes, function() {
        self.onsave();
        self.update();
      });
    };

    this.onmessage = function(e) {
      var data = JSON.parse(e.data);
      var method = data.method;
      var args = data.arguments;
      var csl = self.tags.console;

      if (method == 'log') {
          csl.print('log', args.join(' '));
      }
      else if (method == 'dir') {
          csl.print('dir', JSON.stringify(args[0], null, 2));
      }
      else if (method === 'output') {
          csl.print('output', args.join(' '));
      }
      else if (method == 'error') {
          csl.print('error', args.join(' '));
      }
      else if (method == 'clear') {
          csl.clear();
      }
    };
